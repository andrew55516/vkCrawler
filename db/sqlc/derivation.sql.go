// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: derivation.sql

package db

import (
	"context"
	"time"
)

const getAmountOfUsers = `-- name: GetAmountOfUsers :one
select count(label) from all_nodes
where start < $1
`

func (q *Queries) GetAmountOfUsers(ctx context.Context, start time.Time) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAmountOfUsers, start)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLikesOnlyUsers = `-- name: GetLikesOnlyUsers :many
select distinct(u.label)
from (select ln.label as label
      from likes_edges le
               join likes_nodes ln on le.source = ln.id
      where le.start < $1
      order by le.start) as u
where not exists(
        select id, post_id, owner, thread_owner, created_at
        from comments
        where owner = u.label
          and created_at < $1
    )
`

func (q *Queries) GetLikesOnlyUsers(ctx context.Context, start time.Time) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getLikesOnlyUsers, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var label string
		if err := rows.Scan(&label); err != nil {
			return nil, err
		}
		items = append(items, label)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
